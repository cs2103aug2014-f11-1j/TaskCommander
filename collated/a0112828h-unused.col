//@author: a0112828h-unused



	/**
	 * origin: C:/Users/Mishie/Documents/Eclipse_Workspaces/CS2103/TaskCommander/src/\com\taskcommander\GoogleAPIConnector.java
	 */

	// Methods for done calendar
	/**
	 * Gets all events from Calendar API from the done calendar,
	 * starting from current system time.
	 * @return   Arraylist of TaskCommander Tasks.
	 */
	/*
	private ArrayList<com.taskcommander.Task> getAllDoneEvents() {
		try {
			// Gets all done events
			List<Event> events = calendar.events().list(doneCalendarId)
					.execute().getItems();
			if (events != null) {
				ArrayList<com.taskcommander.Task> taskList = new ArrayList<com.taskcommander.Task>();
				for (Event event : events) {
					com.taskcommander.Task task = toTask(event);
					task.setDone(true);
					taskList.add(task);
				}
				logger.log(Level.INFO, taskList.toString());
				return taskList;
			} else {
				return null;
			}
		}  catch (GoogleJsonResponseException e) {
			if (e.getMessage().contains("401 Unauthorized")) {
				// If not logged in, login attempt handled outside of this class
			} else if (e.getMessage().contains("404 Not Found")) {
				logger.log(Level.WARNING, DONE_CALENDAR_NULL);
			} else {
				logger.log(Level.SEVERE, String.format(MESSAGE_ERROR_OPERATION, OPERATION_GET), e);
			}
		} catch (IOException e) {
			logger.log(Level.SEVERE, String.format(MESSAGE_ERROR_OPERATION, OPERATION_GET), e);
		}
		return null;
	}

	private boolean hasDoneCalendar() {
		logger.log(Level.INFO, "Checking for Done calendar.");
		try {
			String calId = getIdForDoneCalendar();
			if (calId == null) {
				return false;
			} else {
				return !(calendar.calendarList().get(calId).execute().isEmpty());
			}
		} catch (IOException e) {
			if (e.getMessage().contains("404 Not Found")) {
				logger.log(Level.INFO, DONE_CALENDAR_NULL);
			} else {
				logger.log(Level.WARNING, "Unable to check for Done calendar.", e);
			}
		}
		return false;
	}

	private boolean createDoneCalendar() {
		logger.log(Level.INFO, "Trying to create Done calendar.");
		if (!hasDoneCalendar()) {
			try {
				com.google.api.services.calendar.model.Calendar cal = 
						new com.google.api.services.calendar.model.Calendar();
				cal.setSummary(DONE_CALENDAR_SUMMARY);
				com.google.api.services.calendar.model.Calendar createdCal = 
						calendar.calendars().insert(cal).execute();
				doneCalendarId = createdCal.getId();
				logger.log(Level.INFO, "Done calendar created with ID: " + doneCalendarId);

				CalendarListEntry calendarListEntry = new CalendarListEntry();
				calendarListEntry.setId(doneCalendarId);
				CalendarListEntry newEntry = calendar.calendarList().insert(calendarListEntry).execute();
				return !newEntry.isEmpty();
			} catch (IOException e) {
				logger.log(Level.WARNING, "Unable to create Done calendar.", e);
				return false;
			}
		} else {
			doneCalendarId = getIdForDoneCalendar();
			if (doneCalendarId != null) {
				logger.log(Level.INFO, "Done calendar exists.");
				return true;
			} else {
				return false;
			}
		}
	}

	private String getIdForDoneCalendar() {
		logger.log(Level.INFO, "Trying to find the Done calendar and get the ID...");
		try {
			CalendarList newEntry = calendar.calendarList().list().execute();
			String result = null;
			for (CalendarListEntry c : newEntry.getItems()) {
				if (c.getSummary().equals(DONE_CALENDAR_SUMMARY)) {
					result = c.getId();
				}
			}
			return result;
		} catch (IOException e) {
			logger.log(Level.WARNING, "Unable to get ID for Done calendar.", e);
		}
		return null;
	}
	 */
}

	// End of segment: C:/Users/Mishie/Documents/Eclipse_Workspaces/CS2103/TaskCommander/src/\com\taskcommander\GoogleAPIConnector.java





